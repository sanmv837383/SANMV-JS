When we work on web react dom
when working on mobile react native
these two comes under react libraries

the basic way of creating a package is npx node package executeraloows you to work with packages without installing
while installing we had npm node package manager allows you to install the packages
craete-react-app  utility

scripts helps in the production of the environment
start build test eject

index page is the main page that is getting loaded hence it is called single page application SPA

react and react dom libraries are considered and used to change the dom of web
DOM is a tree structure
browser has its own DOM but react creates its own DOM called virtual dom and is 
compared with main dom and only the necessary changes are done in main DOM

the react returns only one tag 
hence we use <div> to return multiple tags
in react we can also use <> </> empty tags to return multiple tags it is also called fragment tags

the componenets name must be capital
name with capital even the file names must be capital

main renders the app
app here has the function which returns the html tags

the function that is returned by the react how is it displayed to function
whatever elements are there in react it tries to make a tree of it
the first thing react does is 
type: tells the type of the elements
props : it is the element , the properties of the elements are stored in key value pair type

const reactElement = {
    type: 'a',
    props:{
        href: 'https://google.com',
        target: '_blank'
    },
    children: 'Click me to visit google'
}

customRender(reactElement, mainContainer)     // this is a method

render what - reactElement
render where - mainContainer
function customRender(reactElement, container){
    const domElement = document.createElement      // create the dom element and write where do you want it to be injected
    (reactElement.type)          //dierectly we cannot give react element hence we take type
    domElement.innerHTML = reactElement.children
    domElement.setAttribute('href', reactElement.props.href)
    domElement.setAttribute('target', reactElement.props.target)
    container.appendChild(domElement)

}

the above code is not good when more number of elements are there hence we are creating a loop now for the tags

const domElement = document.createElement
(reactElement.type)
domElement